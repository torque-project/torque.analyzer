(ns torque.analyzer.resolver
  (:require
    [torque.io.fs  :as fs]
    [torque.string :as str]))

(defprotocol Resolver
  (resolve-ns [_ ns]))

(defn ns->path [ns]
  (reduce fs/cd (fs/path) (str/split (name ns) ".")))

(defn select-path [path relative-path]
  ;; TODO: there be a bug here that modifies path destructively
  (let [project-path (fs/cd path "src" relative-path)
        namespace    (str project-path ".trq")]
    (when (fs/exists? namespace)
      {:file    (fs/open namespace :read :sequential)
       :project (str path)})))

(deftype ProjectResolver [path deps]
  Resolver
  (resolve-ns [_ ns]
    (let [relative-path (ns->path ns)]
      (or (select-path path relative-path)
          (some (fn [dep]
                  (select-path dep relative-path))
                deps)))))

(defn scan
  "Create a list of sub directories of path, excluding . and .."
  [path]
  (->> (fs/readdir path)
       (filter (fn [x]
                 (and (= :directory (fs/entry-type x))
                      (not (or (= (fs/entry-name x) ".")
                               (= (fs/entry-name x) ".."))))))
       (map (fn [x] (fs/cd path (fs/entry-name x))))))

(defn project-resolver
  "Creates a resolver from a path to a project"
  [path]
  (let [deps (scan (str path "/deps"))]
    (new ProjectResolver (fs/path path) deps)))
